module alu (
    input a[16],
    input b[16],
    input alufn_signal[6],
    
    output out[16],
    output zvn[3]
  ) {
  
  //imported modules
  adder adder;
  boolean boolean;
  shifter shifter;
  comparator comparator;
  multiplier multiplier;
  modulus modulus;
  floor_division floor_division;
  
  //signals because out and zvn can't be read
  sig zvn1[3];
  sig out1[16];
  
  always {
  
      adder.a = a;
      adder.b = b;
      adder.alufn_signal = alufn_signal;
      
      zvn = adder.zvn;
      zvn1 = adder.zvn;
      
      multiplier.a = a;
      multiplier.b = b; 
    
      modulus.a = a;
      modulus.b = b;
    
      floor_division.a = a;
      floor_division.b = b;   
    
      boolean.a = a;
      boolean.b = b;
      boolean.alufn_signal = alufn_signal;
    
      shifter.a = a;
      shifter.b = b;
      shifter.alufn_signal = alufn_signal;
      
      
      comparator.zvn = zvn1; //zvn1 from adder
      comparator.alufn_signal = alufn_signal;
      
      
      case (alufn_signal[5:4]){
        b00: 
          out1 = adder.out;
          zvn = adder.zvn;
          if (alufn_signal == b001000){
            out1 = modulus.out;
            zvn = 0;}
          if (alufn_signal == b001100){
            out1 = floor_division.out;
            zvn = 0;}
        b01: 
          out1 = boolean.out;
          zvn = 0;
        b10: 
          out1 = shifter.out;
          zvn = 0;
        b11: 
          out1 = comparator.out;
          zvn = 0;
        default: 
          out1 = 16b0;
          zvn = 0;
    }
    

    out = out1;

  }
}

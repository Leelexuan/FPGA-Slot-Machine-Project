module matrix_led_driver #(
    CHAIN = 2 : CHAIN > 0, // how many 74hc595 are chained together? 
    // Alchitry Au has 100Mhz clock
    // setting SPEED to 5 will cover all output voltages
    SPEED = 7 > 0 // how fast sclk can be? 5Mhz is recommended value  that covers 2V, 4V, and 6V 
  )(
    input clk,  // clock
    input rst,  // reset
    input data_A[CHAIN][8], // input data for all shift registers in the chain at once and then it will be latched
    input data_B[CHAIN][8],
    input data_C[CHAIN][8],
    input timer[CHAIN][8],
    input scoreboard1[CHAIN][8],
    input scoreboard2[CHAIN][8],
    output ds_A,
    output ds_B,
    output ds_C,
    output timer_out,
    output scoreboard_1_bit,
    output scoreboard_2_bit,
    output shcp, // shift register clock 
    output stcp, // storage register clock, on rising edge, all storage reg captures shift reg content 
    output mr, // master reset, when LOW we clear all shift register regardless of clock
    output oe, // output enable, when LOW we observe output at Q0 to Q7 pins of 74hc595 
    // for debugging, to know which state we are at
    output debug_state[3],
    output debug_data_a[CHAIN][8],
    output debug_data_pointer[3],
    output debug_chain_pointer[$clog2(CHAIN)+1]
    
  ) {
  
  counter shiftreg_clock(#SIZE(1), #DIV(SPEED), .rst(rst), .clk(clk));
  edge_detector shiftreg_clock_edge(.clk(clk), #RISE(1), #FALL(0));
  
  fsm state(#INIT(IDLE), .clk(clk), .rst(rst)) = {LOAD, TRANSFER, LATCH, RESET, IDLE};
  
  dff data_a[CHAIN][8](#INIT(CHAINx{{8b0}}), .clk(clk), .rst(rst));
  dff data_b[CHAIN][8](#INIT(CHAINx{{8b0}}), .clk(clk), .rst(rst));
  dff data_c[CHAIN][8](#INIT(CHAINx{{8b0}}), .clk(clk), .rst(rst));
  dff data_timer[CHAIN][8](#INIT(CHAINx{{8b0}}), .clk(clk), .rst(rst));
  dff data_scoreboard_1[CHAIN][8](#INIT(CHAINx{{8b0}}), .clk(clk), .rst(rst));
  dff data_scoreboard_2[CHAIN][8](#INIT(CHAINx{{8b0}}), .clk(clk), .rst(rst));
  
  dff data_pointer[3](.clk(clk), .rst(rst));
  dff chain_pointer[$clog2(CHAIN)+1](#INIT(1), .clk(clk), .rst(rst));


  always {
    ds_A = 0;
    ds_B = 0;
    ds_C = 0;
    
    timer_out = 0;
    
    scoreboard_1_bit = 0;
    scoreboard_2_bit = 0;
    
    oe = 0; // always output by default
    mr = 1;  // no reset by default 
    
    stcp = 0; // don't store anything  
    
    shiftreg_clock_edge.in = shiftreg_clock.value;
    
    shcp = shiftreg_clock.value; // shift register clock 
   
    
    debug_state = b000; 
    
    debug_data_a = data_a.q;
    
    debug_data_pointer = data_pointer.q;
    debug_chain_pointer = chain_pointer.q;
    
    case (state.q){
      state.IDLE:
        debug_state = b111;
        shcp = 0; // turn off shift register clock 
        // wait for new data 
        state.d = state.LOAD;
          
        // store incoming data 
        data_a.d = data_A;
        data_b.d = data_B;
        data_c.d = data_C;
        
        data_timer.d = timer;
        
        data_scoreboard_1.d = scoreboard1;
        data_scoreboard_2.d = scoreboard2;
          
        // reset our pointers
        chain_pointer.d = 1; // start with 1 because we always have at least 1 reg
        data_pointer.d = 0;
        
      state.LOAD:
         shcp = 0;
         // standby, so that we transfer at the beginning of shcp clock cycle
         if (shiftreg_clock_edge.out){
         state.d = state.TRANSFER;
        }
        
      state.TRANSFER:
          debug_state = b001;
          // send current data bit 
          ds_A = data_a.q[chain_pointer.q-1][data_pointer.q];
          ds_B = data_b.q[chain_pointer.q-1][data_pointer.q];
          ds_C = data_c.q[chain_pointer.q-1][data_pointer.q];
          timer_out = data_timer.q[chain_pointer.q-1][data_pointer.q];
          scoreboard_1_bit = data_scoreboard_1.q[chain_pointer.q-1][data_pointer.q];
          scoreboard_2_bit = data_scoreboard_2.q[chain_pointer.q-1][data_pointer.q];
          
          // at the next shift register clock, advance
          if (shiftreg_clock_edge.out){
              // increase data pointer 
              data_pointer.d = data_pointer.q + 1;
          
              // have we written all 8bits?
              if (&data_pointer.q){
          
                  // if yes, increase chain data_pointer
                  chain_pointer.d = chain_pointer.q + 1;
            
                  // have we written to all chains?
                  if (chain_pointer.q == CHAIN){
                    // if yes, time to latch 
                    state.d = state.LATCH;
                  }
              }
          }
        
      state.LATCH:
        debug_state = b010;
        stcp = 1;
        shcp = 0; // turn off shift register clock 
        if (shiftreg_clock_edge.out){
          state.d = state.RESET;
        }
      
      state.RESET:
        debug_state = b011;
        // clear shift register, let storage register unchanged 
        mr = 0;
        // clear current data dff 
        data_a.d = CHAINx{{8b0}};
        data_b.d = CHAINx{{8b0}};
        data_c.d = CHAINx{{8b0}};
        data_timer.d = CHAINx{{8b0}};
        data_scoreboard_1.d = CHAINx{{8b0}};
        data_scoreboard_2.d = CHAINx{{8b0}};
        
        shcp = 0; // turn off shift register clock
        if (shiftreg_clock_edge.out){
          // goes back to idle
          state.d = state.IDLE;
        }
      
    }
      
    
  }
}

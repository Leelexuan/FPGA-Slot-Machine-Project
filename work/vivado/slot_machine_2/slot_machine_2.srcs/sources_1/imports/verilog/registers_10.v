/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module registers_10 (
    input clk,
    input rst,
    input [0:0] we,
    input [15:0] data,
    input io_button_0,
    input io_button_2,
    input [15:0] out_a,
    input [15:0] out_b,
    input [15:0] out_c,
    input [3:0] score_display_1,
    input [3:0] score_display_2,
    input [4:0] ra_address,
    input [4:0] rb_address,
    input [4:0] rc_address,
    output reg [15:0] ra_data,
    output reg [15:0] rb_data,
    output reg [15:0] led_a_rom,
    output reg [15:0] led_b_rom,
    output reg [15:0] led_c_rom,
    output reg [3:0] timer,
    output reg [3:0] scoreboard_1,
    output reg [3:0] scoreboard_2
  );
  
  
  
  reg [15:0] M_led_a_d, M_led_a_q = 1'h0;
  reg [15:0] M_led_b_d, M_led_b_q = 1'h0;
  reg [15:0] M_led_c_d, M_led_c_q = 1'h0;
  reg [15:0] M_led_start_a_d, M_led_start_a_q = 1'h0;
  reg [15:0] M_led_start_b_d, M_led_start_b_q = 1'h0;
  reg [15:0] M_led_start_c_d, M_led_start_c_q = 1'h0;
  reg [15:0] M_reset_buffer_dff_d, M_reset_buffer_dff_q = 1'h0;
  reg [15:0] M_counter_roll_d, M_counter_roll_q = 1'h0;
  reg [15:0] M_led_stop_b_d, M_led_stop_b_q = 1'h0;
  reg [15:0] M_led_stop_c_d, M_led_stop_c_q = 1'h0;
  reg [15:0] M_stop_counter_d, M_stop_counter_q = 1'h0;
  reg [3:0] M_timer_counter_dff_d, M_timer_counter_dff_q = 1'h0;
  reg [15:0] M_final_a_d, M_final_a_q = 1'h0;
  reg [15:0] M_final_b_d, M_final_b_q = 1'h0;
  reg [15:0] M_final_c_d, M_final_c_q = 1'h0;
  reg [3:0] M_timer_display_d, M_timer_display_q = 1'h0;
  reg [15:0] M_score_1_store_d, M_score_1_store_q = 1'h0;
  reg [15:0] M_score_2_store_d, M_score_2_store_q = 1'h0;
  reg [3:0] M_score_1_d, M_score_1_q = 1'h0;
  reg [3:0] M_score_2_d, M_score_2_q = 1'h0;
  wire [6-1:0] M_stopping_counter_value;
  counter_20 stopping_counter (
    .clk(clk),
    .rst(rst),
    .value(M_stopping_counter_value)
  );
  wire [6-1:0] M_rolling_counter_value;
  counter_20 rolling_counter (
    .clk(clk),
    .rst(io_button_0),
    .value(M_rolling_counter_value)
  );
  wire [6-1:0] M_reset_buffer_value;
  counter_21 reset_buffer (
    .clk(clk),
    .rst(io_button_0),
    .value(M_reset_buffer_value)
  );
  wire [4-1:0] M_timer_counter_value;
  counter_22 timer_counter (
    .clk(clk),
    .rst(io_button_2),
    .value(M_timer_counter_value)
  );
  
  always @* begin
    M_stop_counter_d = M_stop_counter_q;
    M_timer_counter_dff_d = M_timer_counter_dff_q;
    M_score_2_d = M_score_2_q;
    M_score_1_d = M_score_1_q;
    M_counter_roll_d = M_counter_roll_q;
    M_timer_display_d = M_timer_display_q;
    M_led_a_d = M_led_a_q;
    M_led_stop_b_d = M_led_stop_b_q;
    M_led_c_d = M_led_c_q;
    M_reset_buffer_dff_d = M_reset_buffer_dff_q;
    M_led_b_d = M_led_b_q;
    M_led_stop_c_d = M_led_stop_c_q;
    M_score_1_store_d = M_score_1_store_q;
    M_led_start_c_d = M_led_start_c_q;
    M_led_start_b_d = M_led_start_b_q;
    M_led_start_a_d = M_led_start_a_q;
    M_score_2_store_d = M_score_2_store_q;
    M_final_a_d = M_final_a_q;
    M_final_b_d = M_final_b_q;
    M_final_c_d = M_final_c_q;
    
    led_a_rom = M_led_a_q;
    led_b_rom = M_led_b_q;
    led_c_rom = M_led_c_q;
    timer = M_timer_display_q;
    scoreboard_1 = M_score_1_q;
    scoreboard_2 = M_score_2_q;
    M_score_1_store_d = score_display_1;
    M_score_2_store_d = score_display_2;
    M_reset_buffer_dff_d = M_reset_buffer_value;
    M_counter_roll_d = M_rolling_counter_value;
    M_stop_counter_d = M_stopping_counter_value;
    M_timer_counter_dff_d = M_timer_counter_value;
    M_final_a_d = out_a;
    M_final_b_d = out_b;
    M_final_c_d = out_c;
    if (we) begin
      
      case (rc_address)
        4'h0: begin
          M_led_a_d = data;
        end
        4'h4: begin
          M_led_b_d = data;
        end
        4'h7: begin
          M_led_c_d = data;
        end
        4'h9: begin
          M_led_start_a_d = data;
        end
        4'ha: begin
          M_led_start_b_d = data;
        end
        4'hb: begin
          M_led_start_c_d = data;
        end
        4'he: begin
          M_led_stop_b_d = data;
        end
        4'hf: begin
          M_led_stop_c_d = data;
        end
        8'h15: begin
          M_timer_display_d = data;
        end
        8'h18: begin
          M_score_1_d = data;
        end
        8'h19: begin
          M_score_2_d = data;
        end
      endcase
    end
    
    case (ra_address)
      4'h0: begin
        ra_data = M_led_a_q;
      end
      4'h4: begin
        ra_data = M_led_b_q;
      end
      4'h7: begin
        ra_data = M_led_c_q;
      end
      4'h9: begin
        ra_data = M_led_start_a_q;
      end
      4'ha: begin
        ra_data = M_led_start_b_q;
      end
      4'hb: begin
        ra_data = M_led_start_c_q;
      end
      4'hc: begin
        ra_data = M_reset_buffer_dff_q;
      end
      4'hd: begin
        ra_data = M_counter_roll_q;
      end
      4'he: begin
        ra_data = M_led_stop_b_q;
      end
      4'hf: begin
        ra_data = M_led_stop_c_q;
      end
      8'h10: begin
        ra_data = M_stop_counter_q;
      end
      8'h11: begin
        ra_data = M_timer_counter_dff_q;
      end
      8'h12: begin
        ra_data = M_final_a_q;
      end
      8'h13: begin
        ra_data = M_final_b_q;
      end
      8'h14: begin
        ra_data = M_final_c_q;
      end
      8'h15: begin
        ra_data = M_timer_display_q;
      end
      8'h16: begin
        ra_data = M_score_1_store_q;
      end
      8'h17: begin
        ra_data = M_score_2_store_q;
      end
      default: begin
        ra_data = 16'h0000;
      end
    endcase
    
    case (rb_address)
      4'h0: begin
        rb_data = M_led_a_q;
      end
      4'h4: begin
        rb_data = M_led_b_q;
      end
      4'h7: begin
        rb_data = M_led_c_q;
      end
      4'h9: begin
        rb_data = M_led_start_a_q;
      end
      4'ha: begin
        rb_data = M_led_start_b_q;
      end
      4'hb: begin
        rb_data = M_led_start_c_q;
      end
      4'hc: begin
        rb_data = M_reset_buffer_dff_q;
      end
      4'hd: begin
        rb_data = M_counter_roll_q;
      end
      4'he: begin
        rb_data = M_led_stop_b_q;
      end
      4'hf: begin
        rb_data = M_led_stop_c_q;
      end
      8'h10: begin
        rb_data = M_stop_counter_q;
      end
      8'h11: begin
        rb_data = M_timer_counter_dff_q;
      end
      8'h12: begin
        rb_data = M_final_a_q;
      end
      8'h13: begin
        rb_data = M_final_b_q;
      end
      8'h14: begin
        rb_data = M_final_c_q;
      end
      8'h15: begin
        rb_data = M_timer_display_q;
      end
      8'h16: begin
        rb_data = M_score_1_store_q;
      end
      8'h17: begin
        rb_data = M_score_2_store_q;
      end
      default: begin
        rb_data = 16'h0000;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_led_a_q <= 1'h0;
      M_led_b_q <= 1'h0;
      M_led_c_q <= 1'h0;
      M_led_start_a_q <= 1'h0;
      M_led_start_b_q <= 1'h0;
      M_led_start_c_q <= 1'h0;
      M_reset_buffer_dff_q <= 1'h0;
      M_counter_roll_q <= 1'h0;
      M_led_stop_b_q <= 1'h0;
      M_led_stop_c_q <= 1'h0;
      M_stop_counter_q <= 1'h0;
      M_timer_counter_dff_q <= 1'h0;
      M_final_a_q <= 1'h0;
      M_final_b_q <= 1'h0;
      M_final_c_q <= 1'h0;
      M_timer_display_q <= 1'h0;
      M_score_1_store_q <= 1'h0;
      M_score_2_store_q <= 1'h0;
      M_score_1_q <= 1'h0;
      M_score_2_q <= 1'h0;
    end else begin
      M_led_a_q <= M_led_a_d;
      M_led_b_q <= M_led_b_d;
      M_led_c_q <= M_led_c_d;
      M_led_start_a_q <= M_led_start_a_d;
      M_led_start_b_q <= M_led_start_b_d;
      M_led_start_c_q <= M_led_start_c_d;
      M_reset_buffer_dff_q <= M_reset_buffer_dff_d;
      M_counter_roll_q <= M_counter_roll_d;
      M_led_stop_b_q <= M_led_stop_b_d;
      M_led_stop_c_q <= M_led_stop_c_d;
      M_stop_counter_q <= M_stop_counter_d;
      M_timer_counter_dff_q <= M_timer_counter_dff_d;
      M_final_a_q <= M_final_a_d;
      M_final_b_q <= M_final_b_d;
      M_final_c_q <= M_final_c_d;
      M_timer_display_q <= M_timer_display_d;
      M_score_1_store_q <= M_score_1_store_d;
      M_score_2_store_q <= M_score_2_store_d;
      M_score_1_q <= M_score_1_d;
      M_score_2_q <= M_score_2_d;
    end
  end
  
endmodule

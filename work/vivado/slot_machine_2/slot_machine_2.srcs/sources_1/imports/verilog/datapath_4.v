/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module datapath_4 (
    input clk,
    input rst,
    input io_button_0,
    input io_button_1,
    input io_button_2,
    input io_dip_0,
    output reg [3:0] pixel,
    output reg [0:0] led_a_light,
    output reg [0:0] led_b_light,
    output reg [0:0] led_c_light,
    output reg [0:0] stcp,
    output reg [0:0] shcp,
    output reg [0:0] timer,
    output reg [0:0] score_1,
    output reg [0:0] score_2,
    output reg [7:0] score_debug,
    output reg [15:0] led_b_rom_address,
    output reg [15:0] debug_rand_start,
    output reg [3:0] timer_debug
  );
  
  
  
  wire [16-1:0] M_registers_ra_data;
  wire [16-1:0] M_registers_rb_data;
  wire [16-1:0] M_registers_led_a_rom;
  wire [16-1:0] M_registers_led_b_rom;
  wire [16-1:0] M_registers_led_c_rom;
  wire [4-1:0] M_registers_timer;
  wire [4-1:0] M_registers_scoreboard_1;
  wire [4-1:0] M_registers_scoreboard_2;
  reg [1-1:0] M_registers_we;
  reg [16-1:0] M_registers_data;
  reg [1-1:0] M_registers_io_button_0;
  reg [1-1:0] M_registers_io_button_2;
  reg [16-1:0] M_registers_out_a;
  reg [16-1:0] M_registers_out_b;
  reg [16-1:0] M_registers_out_c;
  reg [4-1:0] M_registers_score_display_1;
  reg [4-1:0] M_registers_score_display_2;
  reg [5-1:0] M_registers_ra_address;
  reg [5-1:0] M_registers_rb_address;
  reg [5-1:0] M_registers_rc_address;
  registers_10 registers (
    .clk(clk),
    .rst(rst),
    .we(M_registers_we),
    .data(M_registers_data),
    .io_button_0(M_registers_io_button_0),
    .io_button_2(M_registers_io_button_2),
    .out_a(M_registers_out_a),
    .out_b(M_registers_out_b),
    .out_c(M_registers_out_c),
    .score_display_1(M_registers_score_display_1),
    .score_display_2(M_registers_score_display_2),
    .ra_address(M_registers_ra_address),
    .rb_address(M_registers_rb_address),
    .rc_address(M_registers_rc_address),
    .ra_data(M_registers_ra_data),
    .rb_data(M_registers_rb_data),
    .led_a_rom(M_registers_led_a_rom),
    .led_b_rom(M_registers_led_b_rom),
    .led_c_rom(M_registers_led_c_rom),
    .timer(M_registers_timer),
    .scoreboard_1(M_registers_scoreboard_1),
    .scoreboard_2(M_registers_scoreboard_2)
  );
  wire [16-1:0] M_led_looper_a_led_a_rom_address;
  wire [16-1:0] M_led_looper_a_led_b_rom_address;
  wire [16-1:0] M_led_looper_a_led_c_rom_address;
  wire [16-1:0] M_led_looper_a_timer_rom_address;
  wire [16-1:0] M_led_looper_a_scoreboard_1_rom_address;
  wire [16-1:0] M_led_looper_a_scoreboard_2_rom_address;
  wire [4-1:0] M_led_looper_a_pixel;
  reg [16-1:0] M_led_looper_a_reg_a;
  reg [16-1:0] M_led_looper_a_reg_b;
  reg [16-1:0] M_led_looper_a_reg_c;
  reg [4-1:0] M_led_looper_a_timer;
  reg [4-1:0] M_led_looper_a_scoreboard_1;
  reg [4-1:0] M_led_looper_a_scoreboard_2;
  led_looper_a_11 led_looper_a (
    .clk(clk),
    .rst(rst),
    .reg_a(M_led_looper_a_reg_a),
    .reg_b(M_led_looper_a_reg_b),
    .reg_c(M_led_looper_a_reg_c),
    .timer(M_led_looper_a_timer),
    .scoreboard_1(M_led_looper_a_scoreboard_1),
    .scoreboard_2(M_led_looper_a_scoreboard_2),
    .led_a_rom_address(M_led_looper_a_led_a_rom_address),
    .led_b_rom_address(M_led_looper_a_led_b_rom_address),
    .led_c_rom_address(M_led_looper_a_led_c_rom_address),
    .timer_rom_address(M_led_looper_a_timer_rom_address),
    .scoreboard_1_rom_address(M_led_looper_a_scoreboard_1_rom_address),
    .scoreboard_2_rom_address(M_led_looper_a_scoreboard_2_rom_address),
    .pixel(M_led_looper_a_pixel)
  );
  wire [6-1:0] M_control_unit_alufn;
  wire [2-1:0] M_control_unit_asel;
  wire [2-1:0] M_control_unit_bsel;
  wire [2-1:0] M_control_unit_wdsel;
  wire [1-1:0] M_control_unit_we;
  wire [5-1:0] M_control_unit_ra;
  wire [5-1:0] M_control_unit_rb;
  wire [5-1:0] M_control_unit_rc;
  reg [1-1:0] M_control_unit_io_button_0;
  reg [1-1:0] M_control_unit_io_button_1;
  reg [1-1:0] M_control_unit_io_button_2;
  reg [16-1:0] M_control_unit_alu_out;
  reg [1-1:0] M_control_unit_mode;
  control_unit_12 control_unit (
    .clk(clk),
    .rst(rst),
    .io_button_0(M_control_unit_io_button_0),
    .io_button_1(M_control_unit_io_button_1),
    .io_button_2(M_control_unit_io_button_2),
    .alu_out(M_control_unit_alu_out),
    .mode(M_control_unit_mode),
    .alufn(M_control_unit_alufn),
    .asel(M_control_unit_asel),
    .bsel(M_control_unit_bsel),
    .wdsel(M_control_unit_wdsel),
    .we(M_control_unit_we),
    .ra(M_control_unit_ra),
    .rb(M_control_unit_rb),
    .rc(M_control_unit_rc)
  );
  wire [1-1:0] M_matrix_led_driver_ds_A;
  wire [1-1:0] M_matrix_led_driver_ds_B;
  wire [1-1:0] M_matrix_led_driver_ds_C;
  wire [1-1:0] M_matrix_led_driver_timer_out;
  wire [1-1:0] M_matrix_led_driver_scoreboard_1_bit;
  wire [1-1:0] M_matrix_led_driver_scoreboard_2_bit;
  wire [1-1:0] M_matrix_led_driver_shcp;
  wire [1-1:0] M_matrix_led_driver_stcp;
  wire [1-1:0] M_matrix_led_driver_mr;
  wire [1-1:0] M_matrix_led_driver_oe;
  wire [3-1:0] M_matrix_led_driver_debug_state;
  wire [16-1:0] M_matrix_led_driver_debug_data_a;
  wire [3-1:0] M_matrix_led_driver_debug_data_pointer;
  wire [2-1:0] M_matrix_led_driver_debug_chain_pointer;
  reg [16-1:0] M_matrix_led_driver_data_A;
  reg [16-1:0] M_matrix_led_driver_data_B;
  reg [16-1:0] M_matrix_led_driver_data_C;
  reg [16-1:0] M_matrix_led_driver_timer;
  reg [16-1:0] M_matrix_led_driver_scoreboard1;
  reg [16-1:0] M_matrix_led_driver_scoreboard2;
  matrix_led_driver_13 matrix_led_driver (
    .clk(clk),
    .rst(rst),
    .data_A(M_matrix_led_driver_data_A),
    .data_B(M_matrix_led_driver_data_B),
    .data_C(M_matrix_led_driver_data_C),
    .timer(M_matrix_led_driver_timer),
    .scoreboard1(M_matrix_led_driver_scoreboard1),
    .scoreboard2(M_matrix_led_driver_scoreboard2),
    .ds_A(M_matrix_led_driver_ds_A),
    .ds_B(M_matrix_led_driver_ds_B),
    .ds_C(M_matrix_led_driver_ds_C),
    .timer_out(M_matrix_led_driver_timer_out),
    .scoreboard_1_bit(M_matrix_led_driver_scoreboard_1_bit),
    .scoreboard_2_bit(M_matrix_led_driver_scoreboard_2_bit),
    .shcp(M_matrix_led_driver_shcp),
    .stcp(M_matrix_led_driver_stcp),
    .mr(M_matrix_led_driver_mr),
    .oe(M_matrix_led_driver_oe),
    .debug_state(M_matrix_led_driver_debug_state),
    .debug_data_a(M_matrix_led_driver_debug_data_a),
    .debug_data_pointer(M_matrix_led_driver_debug_data_pointer),
    .debug_chain_pointer(M_matrix_led_driver_debug_chain_pointer)
  );
  wire [6-1:0] M_random_number_start_start_A;
  wire [6-1:0] M_random_number_start_start_B;
  wire [6-1:0] M_random_number_start_start_C;
  wire [16-1:0] M_random_number_start_debug;
  random_number_start_14 random_number_start (
    .clk(clk),
    .rst(rst),
    .start_A(M_random_number_start_start_A),
    .start_B(M_random_number_start_start_B),
    .start_C(M_random_number_start_start_C),
    .debug(M_random_number_start_debug)
  );
  
  wire [16-1:0] M_rom_led_light_a;
  wire [16-1:0] M_rom_led_light_b;
  wire [16-1:0] M_rom_led_light_c;
  wire [16-1:0] M_rom_timer_display;
  wire [16-1:0] M_rom_scoreboard1_display;
  wire [16-1:0] M_rom_scoreboard2_display;
  wire [1-1:0] M_rom_led_light_b_test;
  wire [1-1:0] M_rom_led_light_c_test;
  reg [8-1:0] M_rom_address_a;
  reg [8-1:0] M_rom_address_b;
  reg [8-1:0] M_rom_address_c;
  reg [8-1:0] M_rom_timer;
  reg [8-1:0] M_rom_scoreboard1;
  reg [8-1:0] M_rom_scoreboard2;
  rom_15 rom (
    .address_a(M_rom_address_a),
    .address_b(M_rom_address_b),
    .address_c(M_rom_address_c),
    .timer(M_rom_timer),
    .scoreboard1(M_rom_scoreboard1),
    .scoreboard2(M_rom_scoreboard2),
    .led_light_a(M_rom_led_light_a),
    .led_light_b(M_rom_led_light_b),
    .led_light_c(M_rom_led_light_c),
    .timer_display(M_rom_timer_display),
    .scoreboard1_display(M_rom_scoreboard1_display),
    .scoreboard2_display(M_rom_scoreboard2_display),
    .led_light_b_test(M_rom_led_light_b_test),
    .led_light_c_test(M_rom_led_light_c_test)
  );
  
  wire [16-1:0] M_alu_out;
  wire [3-1:0] M_alu_zvn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn_signal;
  alu_16 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn_signal(M_alu_alufn_signal),
    .out(M_alu_out),
    .zvn(M_alu_zvn)
  );
  
  wire [16-1:0] M_final_outputs_out_a;
  wire [16-1:0] M_final_outputs_out_b;
  wire [16-1:0] M_final_outputs_out_c;
  reg [16-1:0] M_final_outputs_led_a;
  reg [16-1:0] M_final_outputs_led_b;
  reg [16-1:0] M_final_outputs_led_c;
  final_outputs_17 final_outputs (
    .led_a(M_final_outputs_led_a),
    .led_b(M_final_outputs_led_b),
    .led_c(M_final_outputs_led_c),
    .out_a(M_final_outputs_out_a),
    .out_b(M_final_outputs_out_b),
    .out_c(M_final_outputs_out_c)
  );
  
  wire [4-1:0] M_score_calculation_output_screen_1;
  wire [4-1:0] M_score_calculation_output_screen_2;
  wire [8-1:0] M_score_calculation_debug;
  reg [16-1:0] M_score_calculation_output_a;
  reg [16-1:0] M_score_calculation_output_b;
  reg [16-1:0] M_score_calculation_output_c;
  score_calculation_18 score_calculation (
    .output_a(M_score_calculation_output_a),
    .output_b(M_score_calculation_output_b),
    .output_c(M_score_calculation_output_c),
    .output_screen_1(M_score_calculation_output_screen_1),
    .output_screen_2(M_score_calculation_output_screen_2),
    .debug(M_score_calculation_debug)
  );
  
  reg [15:0] alu_a;
  
  reg [15:0] alu_b;
  
  reg [15:0] regfile_data;
  
  always @* begin
    M_led_looper_a_reg_a = M_registers_led_a_rom;
    M_led_looper_a_reg_b = M_registers_led_b_rom;
    M_led_looper_a_reg_c = M_registers_led_c_rom;
    M_rom_address_a = M_led_looper_a_led_a_rom_address;
    M_rom_address_b = M_led_looper_a_led_b_rom_address;
    M_rom_address_c = M_led_looper_a_led_c_rom_address;
    pixel = M_led_looper_a_pixel;
    M_matrix_led_driver_data_A = M_rom_led_light_a;
    M_matrix_led_driver_data_B = M_rom_led_light_b;
    M_matrix_led_driver_data_C = M_rom_led_light_c;
    led_a_light = M_matrix_led_driver_ds_A;
    led_b_light = M_matrix_led_driver_ds_B;
    led_c_light = M_matrix_led_driver_ds_C;
    stcp = M_matrix_led_driver_stcp;
    shcp = M_matrix_led_driver_shcp;
    M_control_unit_mode = io_dip_0;
    M_control_unit_io_button_0 = io_button_0;
    M_control_unit_io_button_1 = io_button_1;
    M_control_unit_io_button_2 = io_button_2;
    M_control_unit_alu_out = M_alu_out;
    
    case (M_control_unit_asel)
      2'h0: begin
        alu_a = M_registers_ra_data;
      end
      2'h1: begin
        alu_a = 4'ha;
      end
      2'h2: begin
        alu_a = 4'h1;
      end
      2'h3: begin
        alu_a = 4'h0;
      end
      default: begin
        alu_a = 1'h0;
      end
    endcase
    
    case (M_control_unit_bsel)
      2'h0: begin
        alu_b = M_registers_rb_data;
      end
      2'h1: begin
        alu_b = 4'h8;
      end
      2'h2: begin
        alu_b = 4'h4;
      end
      2'h3: begin
        alu_b = 4'h1;
      end
      default: begin
        alu_b = 1'h0;
      end
    endcase
    M_alu_alufn_signal = M_control_unit_alufn;
    M_alu_a = alu_a;
    M_alu_b = alu_b;
    
    case (M_control_unit_wdsel)
      2'h0: begin
        regfile_data = M_alu_out;
      end
      2'h1: begin
        regfile_data = M_random_number_start_start_A;
      end
      2'h2: begin
        regfile_data = M_random_number_start_start_B;
      end
      2'h3: begin
        regfile_data = M_random_number_start_start_C;
      end
      default: begin
        regfile_data = M_alu_out;
      end
    endcase
    M_registers_ra_address = M_control_unit_ra;
    M_registers_rb_address = M_control_unit_rb;
    M_registers_rc_address = M_control_unit_rc;
    M_registers_we = M_control_unit_we;
    M_registers_data = regfile_data;
    M_final_outputs_led_a = M_registers_led_a_rom;
    M_final_outputs_led_b = M_registers_led_b_rom;
    M_final_outputs_led_c = M_registers_led_c_rom;
    M_registers_out_a = M_final_outputs_out_a;
    M_registers_out_b = M_final_outputs_out_b;
    M_registers_out_c = M_final_outputs_out_c;
    M_registers_io_button_0 = io_button_0;
    M_registers_io_button_2 = io_button_2;
    timer_debug = M_registers_timer;
    M_led_looper_a_timer = M_registers_timer;
    M_rom_timer = M_led_looper_a_timer_rom_address;
    M_matrix_led_driver_timer = M_rom_timer_display;
    timer = M_matrix_led_driver_timer_out;
    M_score_calculation_output_a = M_registers_led_a_rom;
    M_score_calculation_output_b = M_registers_led_b_rom;
    M_score_calculation_output_c = M_registers_led_c_rom;
    M_registers_score_display_1 = M_score_calculation_output_screen_1;
    M_registers_score_display_2 = M_score_calculation_output_screen_2;
    M_led_looper_a_scoreboard_1 = M_registers_scoreboard_1;
    M_led_looper_a_scoreboard_2 = M_registers_scoreboard_2;
    M_rom_scoreboard1 = M_led_looper_a_scoreboard_1_rom_address;
    M_rom_scoreboard2 = M_led_looper_a_scoreboard_2_rom_address;
    M_matrix_led_driver_scoreboard1 = M_rom_scoreboard1_display;
    M_matrix_led_driver_scoreboard2 = M_rom_scoreboard2_display;
    score_1 = M_matrix_led_driver_scoreboard_1_bit;
    score_2 = M_matrix_led_driver_scoreboard_2_bit;
    score_debug = M_score_calculation_debug;
    led_b_rom_address = M_registers_rb_data;
    debug_rand_start = 1'h0;
  end
endmodule

/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg [3:0] dataout,
    output reg [0:0] stcp,
    output reg [0:0] shcp,
    output reg [0:0] timer,
    output reg [0:0] score_1,
    output reg [0:0] score_2,
    input [0:0] smash_button,
    input [0:0] mode,
    input [0:0] coin,
    input [0:0] lever
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_hex_converter_out_hex;
  reg [16-1:0] M_hex_converter_data;
  output_hex_converter_1 hex_converter (
    .data(M_hex_converter_data),
    .out_hex(M_hex_converter_out_hex)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_3 seg (
    .clk(clk),
    .rst(io_button[0+0-:1]),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [4-1:0] M_datapath_pixel;
  wire [1-1:0] M_datapath_led_a_light;
  wire [1-1:0] M_datapath_led_b_light;
  wire [1-1:0] M_datapath_led_c_light;
  wire [1-1:0] M_datapath_stcp;
  wire [1-1:0] M_datapath_shcp;
  wire [1-1:0] M_datapath_timer;
  wire [1-1:0] M_datapath_score_1;
  wire [1-1:0] M_datapath_score_2;
  wire [8-1:0] M_datapath_score_debug;
  wire [16-1:0] M_datapath_led_b_rom_address;
  wire [16-1:0] M_datapath_debug_rand_start;
  wire [4-1:0] M_datapath_timer_debug;
  reg [1-1:0] M_datapath_io_button_0;
  reg [1-1:0] M_datapath_io_button_1;
  reg [1-1:0] M_datapath_io_button_2;
  reg [1-1:0] M_datapath_io_dip_0;
  datapath_4 datapath (
    .clk(clk),
    .rst(io_button[0+0-:1]),
    .io_button_0(M_datapath_io_button_0),
    .io_button_1(M_datapath_io_button_1),
    .io_button_2(M_datapath_io_button_2),
    .io_dip_0(M_datapath_io_dip_0),
    .pixel(M_datapath_pixel),
    .led_a_light(M_datapath_led_a_light),
    .led_b_light(M_datapath_led_b_light),
    .led_c_light(M_datapath_led_c_light),
    .stcp(M_datapath_stcp),
    .shcp(M_datapath_shcp),
    .timer(M_datapath_timer),
    .score_1(M_datapath_score_1),
    .score_2(M_datapath_score_2),
    .score_debug(M_datapath_score_debug),
    .led_b_rom_address(M_datapath_led_b_rom_address),
    .debug_rand_start(M_datapath_debug_rand_start),
    .timer_debug(M_datapath_timer_debug)
  );
  wire [1-1:0] M_edge_dt_button1_out;
  reg [1-1:0] M_edge_dt_button1_in;
  edge_detector_5 edge_dt_button1 (
    .clk(clk),
    .in(M_edge_dt_button1_in),
    .out(M_edge_dt_button1_out)
  );
  wire [1-1:0] M_edge_dt_button2_out;
  reg [1-1:0] M_edge_dt_button2_in;
  edge_detector_5 edge_dt_button2 (
    .clk(clk),
    .in(M_edge_dt_button2_in),
    .out(M_edge_dt_button2_out)
  );
  wire [1-1:0] M_edge_dt_button3_out;
  reg [1-1:0] M_edge_dt_button3_in;
  edge_detector_5 edge_dt_button3 (
    .clk(clk),
    .in(M_edge_dt_button3_in),
    .out(M_edge_dt_button3_out)
  );
  wire [1-1:0] M_button_cond_1_out;
  reg [1-1:0] M_button_cond_1_in;
  button_conditioner_6 button_cond_1 (
    .clk(clk),
    .in(M_button_cond_1_in),
    .out(M_button_cond_1_out)
  );
  wire [1-1:0] M_button_cond_2_out;
  reg [1-1:0] M_button_cond_2_in;
  button_conditioner_6 button_cond_2 (
    .clk(clk),
    .in(M_button_cond_2_in),
    .out(M_button_cond_2_out)
  );
  wire [1-1:0] M_button_cond_3_out;
  reg [1-1:0] M_button_cond_3_in;
  button_conditioner_6 button_cond_3 (
    .clk(clk),
    .in(M_button_cond_3_in),
    .out(M_button_cond_3_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    M_hex_converter_data = M_datapath_score_debug;
    M_seg_values = M_hex_converter_out_hex;
    io_led = 24'h000000;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    M_datapath_io_dip_0 = mode;
    io_led[0+(M_datapath_pixel)*1+0-:1] = M_datapath_led_a_light;
    io_led[8+(M_datapath_pixel)*1+0-:1] = M_datapath_led_b_light;
    io_led[16+(M_datapath_pixel)*1+0-:1] = M_datapath_led_c_light;
    dataout[0+0-:1] = M_datapath_led_a_light;
    dataout[1+0-:1] = M_datapath_led_b_light;
    dataout[2+0-:1] = M_datapath_led_c_light;
    stcp = M_datapath_stcp;
    shcp = M_datapath_shcp;
    timer = M_datapath_timer;
    score_1 = M_datapath_score_1;
    score_2 = M_datapath_score_2;
    M_button_cond_1_in = smash_button;
    M_button_cond_2_in = coin;
    M_button_cond_3_in = lever;
    M_edge_dt_button1_in = M_button_cond_1_out;
    M_edge_dt_button2_in = M_button_cond_2_out;
    M_edge_dt_button3_in = M_button_cond_3_out;
    M_datapath_io_button_0 = M_edge_dt_button1_out;
    M_datapath_io_button_1 = M_edge_dt_button2_out;
    M_datapath_io_button_2 = M_edge_dt_button3_out;
  end
endmodule

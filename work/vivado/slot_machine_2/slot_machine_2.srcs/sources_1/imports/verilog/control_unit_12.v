/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module control_unit_12 (
    input clk,
    input rst,
    input io_button_0,
    input io_button_1,
    input io_button_2,
    input [15:0] alu_out,
    input mode,
    output reg [5:0] alufn,
    output reg [1:0] asel,
    output reg [1:0] bsel,
    output reg [1:0] wdsel,
    output reg [0:0] we,
    output reg [4:0] ra,
    output reg [4:0] rb,
    output reg [4:0] rc
  );
  
  
  
  localparam START_SET_A_machine_state = 6'd0;
  localparam START_SET_B_machine_state = 6'd1;
  localparam START_SET_C_machine_state = 6'd2;
  localparam START_A_machine_state = 6'd3;
  localparam START_B_machine_state = 6'd4;
  localparam START_C_machine_state = 6'd5;
  localparam CHECK_COIN_machine_state = 6'd6;
  localparam CHECK_LEVER_machine_state = 6'd7;
  localparam DISPLAY_TIMER_machine_state = 6'd8;
  localparam CHECK_TIMER_machine_state = 6'd9;
  localparam ROLL_A_machine_state = 6'd10;
  localparam ROLL_B_machine_state = 6'd11;
  localparam ROLL_C_machine_state = 6'd12;
  localparam STOP_machine_state = 6'd13;
  localparam STORE_STOP_B_machine_state = 6'd14;
  localparam STORE_STOP_C_machine_state = 6'd15;
  localparam CHECK_STOP_B_machine_state = 6'd16;
  localparam SECOND_ROLL_B_0_machine_state = 6'd17;
  localparam SECOND_ROLL_C_0_machine_state = 6'd18;
  localparam CHECK_STOP_C_machine_state = 6'd19;
  localparam LAST_ROLL_C_0_machine_state = 6'd20;
  localparam DISPLAY_TIMER_2_machine_state = 6'd21;
  localparam CHECK_TIMER_2_machine_state = 6'd22;
  localparam SECOND_ROLL_B_1_machine_state = 6'd23;
  localparam SECOND_ROLL_C_1_machine_state = 6'd24;
  localparam DISPLAY_TIMER_3_machine_state = 6'd25;
  localparam CHECK_TIMER_3_machine_state = 6'd26;
  localparam LAST_ROLL_C_1_machine_state = 6'd27;
  localparam DISPLAY_STOPPED_A_machine_state = 6'd28;
  localparam DISPLAY_STOPPED_B_machine_state = 6'd29;
  localparam DISPLAY_STOPPED_C_machine_state = 6'd30;
  localparam DISPLAY_SCORE_1_machine_state = 6'd31;
  localparam DISPLAY_SCORE_2_machine_state = 6'd32;
  localparam END_machine_state = 6'd33;
  localparam RESET_TIMER_machine_state = 6'd34;
  localparam RESET_SCORE_1_machine_state = 6'd35;
  localparam RESET_SCORE_2_machine_state = 6'd36;
  
  reg [5:0] M_machine_state_d, M_machine_state_q = START_SET_A_machine_state;
  
  always @* begin
    M_machine_state_d = M_machine_state_q;
    
    alufn = 1'h0;
    asel = 1'h0;
    bsel = 1'h0;
    wdsel = 1'h0;
    we = 1'h0;
    ra = 1'h0;
    rb = 1'h0;
    rc = 1'h0;
    
    case (M_machine_state_q)
      START_SET_A_machine_state: begin
        alufn = 6'h00;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h1;
        we = 1'h1;
        ra = 1'h0;
        rb = 1'h0;
        rc = 4'h9;
        M_machine_state_d = START_SET_B_machine_state;
      end
      START_SET_B_machine_state: begin
        alufn = 6'h00;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h2;
        we = 1'h1;
        ra = 1'h0;
        rb = 1'h0;
        rc = 4'ha;
        M_machine_state_d = START_SET_C_machine_state;
      end
      START_SET_C_machine_state: begin
        alufn = 6'h00;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h3;
        we = 1'h1;
        ra = 1'h0;
        rb = 1'h0;
        rc = 4'hb;
        M_machine_state_d = START_A_machine_state;
      end
      START_A_machine_state: begin
        alufn = 6'h1a;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 4'h9;
        rb = 1'h0;
        rc = 4'h0;
        M_machine_state_d = START_B_machine_state;
      end
      START_B_machine_state: begin
        alufn = 6'h1a;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 4'ha;
        rb = 1'h0;
        rc = 4'h4;
        M_machine_state_d = START_C_machine_state;
      end
      START_C_machine_state: begin
        alufn = 6'h1a;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 4'hb;
        rb = 1'h0;
        rc = 4'h7;
        M_machine_state_d = CHECK_COIN_machine_state;
      end
      CHECK_COIN_machine_state: begin
        if (io_button_1) begin
          M_machine_state_d = CHECK_LEVER_machine_state;
        end else begin
          M_machine_state_d = CHECK_COIN_machine_state;
        end
      end
      CHECK_LEVER_machine_state: begin
        if (io_button_2) begin
          M_machine_state_d = DISPLAY_TIMER_machine_state;
        end else begin
          M_machine_state_d = CHECK_LEVER_machine_state;
        end
      end
      DISPLAY_TIMER_machine_state: begin
        alufn = 6'h1a;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 8'h11;
        rb = 4'h0;
        rc = 8'h15;
        M_machine_state_d = CHECK_TIMER_machine_state;
      end
      CHECK_TIMER_machine_state: begin
        alufn = 6'h33;
        asel = 2'h3;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h0;
        ra = 4'h0;
        rb = 8'h15;
        rc = 4'h0;
        if (alu_out == 16'h0001) begin
          M_machine_state_d = END_machine_state;
        end else begin
          M_machine_state_d = ROLL_A_machine_state;
        end
      end
      ROLL_A_machine_state: begin
        alufn = 6'h00;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 4'h9;
        rb = 4'hd;
        rc = 4'h0;
        if (io_button_0) begin
          M_machine_state_d = DISPLAY_STOPPED_A_machine_state;
        end else begin
          M_machine_state_d = ROLL_B_machine_state;
        end
      end
      ROLL_B_machine_state: begin
        alufn = 6'h00;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 4'ha;
        rb = 4'hd;
        rc = 4'h4;
        if (io_button_0) begin
          M_machine_state_d = DISPLAY_STOPPED_A_machine_state;
        end else begin
          M_machine_state_d = ROLL_C_machine_state;
        end
      end
      ROLL_C_machine_state: begin
        alufn = 6'h00;
        asel = 2'h2;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 4'hb;
        rb = 4'hd;
        rc = 4'h7;
        if (io_button_0) begin
          M_machine_state_d = DISPLAY_STOPPED_A_machine_state;
        end else begin
          M_machine_state_d = DISPLAY_TIMER_machine_state;
        end
      end
      STOP_machine_state: begin
        alufn = 6'h00;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h0;
        ra = 4'h0;
        rb = 4'h0;
        rc = 4'h0;
        if (mode == 1'h1) begin
          M_machine_state_d = SECOND_ROLL_B_1_machine_state;
        end else begin
          M_machine_state_d = STORE_STOP_B_machine_state;
        end
      end
      STORE_STOP_B_machine_state: begin
        alufn = 6'h00;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h2;
        we = 1'h1;
        ra = 1'h0;
        rb = 1'h0;
        rc = 4'he;
        M_machine_state_d = STORE_STOP_C_machine_state;
      end
      STORE_STOP_C_machine_state: begin
        alufn = 6'h00;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h3;
        we = 1'h1;
        ra = 1'h0;
        rb = 1'h0;
        rc = 4'hf;
        M_machine_state_d = CHECK_STOP_B_machine_state;
      end
      CHECK_STOP_B_machine_state: begin
        alufn = 6'h33;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h0;
        ra = 8'h10;
        rb = 4'he;
        rc = 4'h0;
        if (alu_out == 16'h0001) begin
          M_machine_state_d = DISPLAY_STOPPED_B_machine_state;
        end else begin
          M_machine_state_d = SECOND_ROLL_B_0_machine_state;
        end
      end
      SECOND_ROLL_B_0_machine_state: begin
        alufn = 6'h00;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 4'ha;
        rb = 4'hd;
        rc = 4'h4;
        M_machine_state_d = SECOND_ROLL_C_0_machine_state;
      end
      SECOND_ROLL_C_0_machine_state: begin
        alufn = 6'h00;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 4'hb;
        rb = 4'hd;
        rc = 4'h7;
        M_machine_state_d = CHECK_STOP_B_machine_state;
      end
      CHECK_STOP_C_machine_state: begin
        alufn = 6'h33;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h0;
        ra = 8'h10;
        rb = 4'hf;
        rc = 4'h0;
        if (alu_out == 16'h0001) begin
          M_machine_state_d = DISPLAY_STOPPED_C_machine_state;
        end else begin
          M_machine_state_d = LAST_ROLL_C_0_machine_state;
        end
      end
      LAST_ROLL_C_0_machine_state: begin
        alufn = 6'h00;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 4'hb;
        rb = 4'hd;
        rc = 4'h7;
        M_machine_state_d = CHECK_STOP_C_machine_state;
      end
      DISPLAY_TIMER_2_machine_state: begin
        alufn = 6'h1a;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 8'h11;
        rb = 4'h0;
        rc = 8'h15;
        if (io_button_0) begin
          M_machine_state_d = DISPLAY_STOPPED_B_machine_state;
        end else begin
          M_machine_state_d = CHECK_TIMER_2_machine_state;
        end
      end
      CHECK_TIMER_2_machine_state: begin
        alufn = 6'h33;
        asel = 2'h3;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h0;
        ra = 4'h0;
        rb = 8'h15;
        rc = 4'h0;
        if (alu_out == 16'h0001) begin
          M_machine_state_d = END_machine_state;
        end else begin
          M_machine_state_d = SECOND_ROLL_B_1_machine_state;
        end
      end
      SECOND_ROLL_B_1_machine_state: begin
        alufn = 6'h00;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 4'ha;
        rb = 4'hd;
        rc = 4'h4;
        if (io_button_0) begin
          M_machine_state_d = DISPLAY_STOPPED_B_machine_state;
        end else begin
          M_machine_state_d = SECOND_ROLL_C_1_machine_state;
        end
      end
      SECOND_ROLL_C_1_machine_state: begin
        alufn = 6'h00;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 4'hb;
        rb = 4'hd;
        rc = 4'h7;
        if (io_button_0) begin
          M_machine_state_d = DISPLAY_STOPPED_B_machine_state;
        end else begin
          M_machine_state_d = DISPLAY_TIMER_2_machine_state;
        end
      end
      DISPLAY_TIMER_3_machine_state: begin
        alufn = 6'h1a;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 8'h11;
        rb = 4'h0;
        rc = 8'h15;
        if (io_button_0) begin
          M_machine_state_d = DISPLAY_STOPPED_C_machine_state;
        end else begin
          M_machine_state_d = CHECK_TIMER_3_machine_state;
        end
      end
      CHECK_TIMER_3_machine_state: begin
        alufn = 6'h33;
        asel = 2'h3;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h0;
        ra = 4'h0;
        rb = 8'h15;
        rc = 4'h0;
        if (alu_out == 16'h0001) begin
          M_machine_state_d = END_machine_state;
        end else begin
          M_machine_state_d = LAST_ROLL_C_1_machine_state;
        end
      end
      LAST_ROLL_C_1_machine_state: begin
        alufn = 6'h00;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 4'hb;
        rb = 4'hd;
        rc = 4'h7;
        if (io_button_0) begin
          M_machine_state_d = DISPLAY_STOPPED_C_machine_state;
        end else begin
          M_machine_state_d = DISPLAY_TIMER_3_machine_state;
        end
      end
      DISPLAY_STOPPED_A_machine_state: begin
        alufn = 6'h1a;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 8'h12;
        rb = 4'h0;
        rc = 4'h0;
        M_machine_state_d = STOP_machine_state;
      end
      DISPLAY_STOPPED_B_machine_state: begin
        alufn = 6'h1a;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 8'h13;
        rb = 4'h0;
        rc = 4'h4;
        if (mode == 1'h1) begin
          M_machine_state_d = LAST_ROLL_C_1_machine_state;
        end else begin
          M_machine_state_d = CHECK_STOP_C_machine_state;
        end
      end
      DISPLAY_STOPPED_C_machine_state: begin
        alufn = 6'h1a;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 8'h14;
        rb = 4'h0;
        rc = 4'h7;
        M_machine_state_d = DISPLAY_SCORE_1_machine_state;
      end
      DISPLAY_SCORE_1_machine_state: begin
        alufn = 6'h1a;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 8'h16;
        rb = 4'h0;
        rc = 8'h18;
        M_machine_state_d = DISPLAY_SCORE_2_machine_state;
      end
      DISPLAY_SCORE_2_machine_state: begin
        alufn = 6'h1a;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 8'h17;
        rb = 4'h0;
        rc = 8'h19;
        M_machine_state_d = END_machine_state;
      end
      END_machine_state: begin
        if (io_button_0) begin
          M_machine_state_d = RESET_TIMER_machine_state;
        end else begin
          M_machine_state_d = END_machine_state;
        end
      end
      RESET_TIMER_machine_state: begin
        alufn = 6'h1a;
        asel = 2'h3;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 4'h0;
        rb = 4'h0;
        rc = 8'h15;
        M_machine_state_d = RESET_SCORE_1_machine_state;
      end
      RESET_SCORE_1_machine_state: begin
        alufn = 6'h1a;
        asel = 2'h3;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 4'h0;
        rb = 4'h0;
        rc = 8'h18;
        M_machine_state_d = RESET_SCORE_2_machine_state;
      end
      RESET_SCORE_2_machine_state: begin
        alufn = 6'h1a;
        asel = 2'h3;
        bsel = 2'h0;
        wdsel = 2'h0;
        we = 1'h1;
        ra = 4'h0;
        rb = 4'h0;
        rc = 8'h18;
        M_machine_state_d = START_A_machine_state;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_machine_state_q <= 1'h0;
    end else begin
      M_machine_state_q <= M_machine_state_d;
    end
  end
  
endmodule

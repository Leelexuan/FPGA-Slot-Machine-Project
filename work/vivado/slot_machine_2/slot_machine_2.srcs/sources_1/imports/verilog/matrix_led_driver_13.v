/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     CHAIN = 2
     SPEED = 7
*/
module matrix_led_driver_13 (
    input clk,
    input rst,
    input [15:0] data_A,
    input [15:0] data_B,
    input [15:0] data_C,
    input [15:0] timer,
    input [15:0] scoreboard1,
    input [15:0] scoreboard2,
    output reg ds_A,
    output reg ds_B,
    output reg ds_C,
    output reg timer_out,
    output reg scoreboard_1_bit,
    output reg scoreboard_2_bit,
    output reg shcp,
    output reg stcp,
    output reg mr,
    output reg oe,
    output reg [2:0] debug_state,
    output reg [15:0] debug_data_a,
    output reg [2:0] debug_data_pointer,
    output reg [1:0] debug_chain_pointer
  );
  
  localparam CHAIN = 2'h2;
  localparam SPEED = 3'h7;
  
  
  wire [1-1:0] M_shiftreg_clock_value;
  counter_25 shiftreg_clock (
    .rst(rst),
    .clk(clk),
    .value(M_shiftreg_clock_value)
  );
  
  wire [1-1:0] M_shiftreg_clock_edge_out;
  reg [1-1:0] M_shiftreg_clock_edge_in;
  edge_detector_5 shiftreg_clock_edge (
    .clk(clk),
    .in(M_shiftreg_clock_edge_in),
    .out(M_shiftreg_clock_edge_out)
  );
  
  
  localparam LOAD_state = 3'd0;
  localparam TRANSFER_state = 3'd1;
  localparam LATCH_state = 3'd2;
  localparam RESET_state = 3'd3;
  localparam IDLE_state = 3'd4;
  
  reg [2:0] M_state_d, M_state_q = IDLE_state;
  
  reg [15:0] M_data_a_d, M_data_a_q = 16'h0000;
  
  reg [15:0] M_data_b_d, M_data_b_q = 16'h0000;
  
  reg [15:0] M_data_c_d, M_data_c_q = 16'h0000;
  
  reg [15:0] M_data_timer_d, M_data_timer_q = 16'h0000;
  
  reg [15:0] M_data_scoreboard_1_d, M_data_scoreboard_1_q = 16'h0000;
  
  reg [15:0] M_data_scoreboard_2_d, M_data_scoreboard_2_q = 16'h0000;
  
  reg [2:0] M_data_pointer_d, M_data_pointer_q = 1'h0;
  
  reg [1:0] M_chain_pointer_d, M_chain_pointer_q = 1'h1;
  
  always @* begin
    M_state_d = M_state_q;
    M_data_timer_d = M_data_timer_q;
    M_data_scoreboard_2_d = M_data_scoreboard_2_q;
    M_data_pointer_d = M_data_pointer_q;
    M_chain_pointer_d = M_chain_pointer_q;
    M_data_b_d = M_data_b_q;
    M_data_a_d = M_data_a_q;
    M_data_c_d = M_data_c_q;
    M_data_scoreboard_1_d = M_data_scoreboard_1_q;
    
    ds_A = 1'h0;
    ds_B = 1'h0;
    ds_C = 1'h0;
    timer_out = 1'h0;
    scoreboard_1_bit = 1'h0;
    scoreboard_2_bit = 1'h0;
    oe = 1'h0;
    mr = 1'h1;
    stcp = 1'h0;
    M_shiftreg_clock_edge_in = M_shiftreg_clock_value;
    shcp = M_shiftreg_clock_value;
    debug_state = 3'h0;
    debug_data_a = M_data_a_q;
    debug_data_pointer = M_data_pointer_q;
    debug_chain_pointer = M_chain_pointer_q;
    
    case (M_state_q)
      IDLE_state: begin
        debug_state = 3'h7;
        shcp = 1'h0;
        M_state_d = LOAD_state;
        M_data_a_d = data_A;
        M_data_b_d = data_B;
        M_data_c_d = data_C;
        M_data_timer_d = timer;
        M_data_scoreboard_1_d = scoreboard1;
        M_data_scoreboard_2_d = scoreboard2;
        M_chain_pointer_d = 1'h1;
        M_data_pointer_d = 1'h0;
      end
      LOAD_state: begin
        shcp = 1'h0;
        if (M_shiftreg_clock_edge_out) begin
          M_state_d = TRANSFER_state;
        end
      end
      TRANSFER_state: begin
        debug_state = 3'h1;
        ds_A = M_data_a_q[(M_chain_pointer_q - 1'h1)*8+(M_data_pointer_q)*1+0-:1];
        ds_B = M_data_b_q[(M_chain_pointer_q - 1'h1)*8+(M_data_pointer_q)*1+0-:1];
        ds_C = M_data_c_q[(M_chain_pointer_q - 1'h1)*8+(M_data_pointer_q)*1+0-:1];
        timer_out = M_data_timer_q[(M_chain_pointer_q - 1'h1)*8+(M_data_pointer_q)*1+0-:1];
        scoreboard_1_bit = M_data_scoreboard_1_q[(M_chain_pointer_q - 1'h1)*8+(M_data_pointer_q)*1+0-:1];
        scoreboard_2_bit = M_data_scoreboard_2_q[(M_chain_pointer_q - 1'h1)*8+(M_data_pointer_q)*1+0-:1];
        if (M_shiftreg_clock_edge_out) begin
          M_data_pointer_d = M_data_pointer_q + 1'h1;
          if ((&M_data_pointer_q)) begin
            M_chain_pointer_d = M_chain_pointer_q + 1'h1;
            if (M_chain_pointer_q == 2'h2) begin
              M_state_d = LATCH_state;
            end
          end
        end
      end
      LATCH_state: begin
        debug_state = 3'h2;
        stcp = 1'h1;
        shcp = 1'h0;
        if (M_shiftreg_clock_edge_out) begin
          M_state_d = RESET_state;
        end
      end
      RESET_state: begin
        debug_state = 3'h3;
        mr = 1'h0;
        M_data_a_d = 16'h0000;
        M_data_b_d = 16'h0000;
        M_data_c_d = 16'h0000;
        M_data_timer_d = 16'h0000;
        M_data_scoreboard_1_d = 16'h0000;
        M_data_scoreboard_2_d = 16'h0000;
        shcp = 1'h0;
        if (M_shiftreg_clock_edge_out) begin
          M_state_d = IDLE_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_data_b_q <= 16'h0000;
    end else begin
      M_data_b_q <= M_data_b_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_data_timer_q <= 16'h0000;
    end else begin
      M_data_timer_q <= M_data_timer_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_data_scoreboard_1_q <= 16'h0000;
    end else begin
      M_data_scoreboard_1_q <= M_data_scoreboard_1_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_data_a_q <= 16'h0000;
    end else begin
      M_data_a_q <= M_data_a_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_data_c_q <= 16'h0000;
    end else begin
      M_data_c_q <= M_data_c_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_data_pointer_q <= 1'h0;
    end else begin
      M_data_pointer_q <= M_data_pointer_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_chain_pointer_q <= 1'h1;
    end else begin
      M_chain_pointer_q <= M_chain_pointer_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_data_scoreboard_2_q <= 16'h0000;
    end else begin
      M_data_scoreboard_2_q <= M_data_scoreboard_2_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 3'h4;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
